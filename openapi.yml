openapi: 3.0.2
info:
  title: Transaction-V3 API Definition
  description: Transaction-V3 API for Merchant Portal
  version: V3.70.1
tags:
  - name: transaction
    description: endpoints used to process a transaction
paths:
  /api/merchant/v3/transaction:
    get:
      summary: Find transactions of a merchant according to some search parameters.
      description: '''
        Find transactions of a merchant according to the following search parameters:
          firstname, lastname, orderId,
          status (REPORT_CAPTURE, REPORT_CAPTURE_EXPIRING, IN_BILLING, BILLED, EXPIRED),
          minOrderValue, maxOrderValue.
        The search filter combines the search tags as follows:
          call /transaction?firstname=Ralf&minOrderValue=5000
          -> find transactions with customers firstname Ralf and a minimum order value of 5000€
      '''
      tags:
        - transaction
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/firstname'
        - $ref: '#/components/parameters/lastname'
        - $ref: '#/components/parameters/orderId'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/minOrderValue'
        - $ref: '#/components/parameters/maxOrderValue'
      responses:
        '200':
          $ref: '#/components/responses/TransactionListResponse'
        '400':
          $ref: '#/components/responses/ConstraintViolationError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/merchant/v3/transaction/{transactionId}:
    get:
      summary: Retrieve a transaction of a merchant according to a unique functional identifier
      description: A single transaction is loaded according to its unique functional identifier.
      tags:
        - transaction
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/transactionId'
      responses:
        '200':
          $ref: '#/components/responses/TransactionResponse'
        '400':
          $ref: '#/components/responses/ConstraintViolationError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/merchant/v3/transaction/{transactionId}/capture:
    post:
      summary: Report a capture for a transaction according to its unique functional identifier
      description: Reports a capture for the specified merchant's transaction. Only one capture can be reported per transaction.
      tags:
        - transaction
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/transactionId'
      responses:
        '202':
          description: accepted for processing
          headers:
            Location:
              description: url to retrieve a transaction
              schema:
                type: string
        '400':
          $ref: '#/components/responses/ConstraintViolationError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
components:
  securitySchemes:
    basicAuth:
      description: username/password -> webshop id/ratenkauf token
      type: http
      scheme: basic
  schemas:
    TransactionResponse:
      type: object
      properties:
        transactionId:
          description: Unique functional transaction identifier (consists of 6 characters)
          type: string
          example: EWZEN7
        status:
          description: Status structure = <Merchant-Transaction-Status>_<Booking-Status> -> Merchant-Transaction-Status are REPORT_CAPTURE (LIEFERUNG_MELDEN), REPORT_CAPTURE_EXPIRING (LIEFERUNG_MELDEN_AUSLAUFEND), IN_BILLING (IN_ABRECHNUNG), BILLED (ABGERECHNET), EXPIRED (ABGELAUFEN). Applicable Booking-Status for this scenario are FAILED, PENDING
          type: string
          example: EXPIRED
          enum:
            - REPORT_CAPTURE
            - REPORT_CAPTURE_EXPIRING
            - IN_BILLING
            - BILLED
            - EXPIRED
            - REPORT_CAPTURE_FAILED
            - REPORT_CAPTURE_EXPIRING_FAILED
            - IN_BILLING_FAILED
            - BILLED_FAILED
            - EXPIRED_FAILED
            - REPORT_CAPTURE_PENDING
            - REPORT_CAPTURE_EXPIRING_PENDING
            - IN_BILLING_PENDING
            - BILLED_PENDING
            - EXPIRED_PENDING
        message:
          type: string
          description: error message whenever a booking (e.g REFUND/CAPTURE) related to a transaction fails
        bookings:
          type: array
          items:
            $ref: '#/components/schemas/Booking'
        customer:
          $ref: '#/components/schemas/Customer'
        creditAccountNumber:
          description: (= kreditKontonummer)
          type: string
          example: 5386968600
        orderDetails:
          $ref: '#/components/schemas/OrderDetails'
        refundDetails:
          type: array
          items:
            $ref: '#/components/schemas/Refund'
        refundsTotalValue:
          description: Sum of all the refund amounts in €
          type: number
          example: 488.37
    Booking:
      type: object
      properties:
        uuid:
          type: string
        created:
          type: string
          format: date-time
          example: '2021-03-04T14:41:09.002Z'
        type:
          type: string
          example: REFUND
          enum:
            - REFUND
            - CAPTURE
            - NOTIFY
        status:
          type: string
          example: DONE
          enum:
            - DONE
            - FAILED
            - PENDING
            - PROCESSING
        message:
          type: string
          description: error message whenever a booking (e.g REFUND/CAPTURE) related to a transaction fails
    Customer:
      type: object
      properties:
        firstName:
          type: string
          example: Max
        lastName:
          type: string
          example: Müller
        customerNumber:
          type: string
          example: 2810941815
    OrderDetails:
      type: object
      properties:
        orderDate:
          description: Order date ( = bestelldatum)
          type: string
          format: date
          example: '2017-02-06'
        currentOrderValue:
          description: Amount in € ( = aktuellerBestellwert in €)
          type: number
          example: 356.62
        originalOrderValue:
          description: Amount in € ( = urspruenglicherBestellwert in €)
          type: number
          example: 356.62
    Refund:
      type: object
      properties:
        refundAmount:
          description: Amount in € ( = widerrufenerBetrag in €)
          type: number
          example: 120.55
        refundBookingDate:
          description: ( = buchungsdatum)
          type: string
          format: date
          example: '2017-01-01'
        refundEntryDate:
          description: ( = eingabedatum)
          type: string
          format: date
          example: '2017-01-01'
        refundDate:
          description: ( = rueckabwicklungsdatum)
          type: string
          format: date
          example: '2017-01-01'
        reason:
          type: string
          description: Reason for refund -> REVOCATION_FULL (WIDERRUF_VOLLSTAENDIG), REVOCATION_PARTIAL (WIDERRUF_TEILWEISE), REFUND_GUARANTEE_WARRANTY (RUECKGABE_GARANTIE_GEWAEHRLEISTUNG), REDUCTION_GUARANTEE_WARRANTY (MINDERUNG_GARANTIE_GEWAEHRLEISTUNG)
          example: REVOCATION_PARTIAL
          enum:
            - REVOCATION_FULL
            - REVOCATION_PARTIAL
            - REFUND_GUARANTEE_WARRANTY
            - REDUCTION_GUARANTEE_WARRANTY
    ConstraintViolation:
      type: object
      properties:
        title:
          type: string
        violations:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
            required:
              - field
              - message
      required:
        - title
        - violations
    ServerError:
      type: object
      properties:
        title:
          type: string
        detail:
          type: string
    AuthenticationError:
      type: object
      properties:
        title:
          type: string
        detail:
          type: string
  parameters:
    transactionId:
      name: transactionId
      in: path
      description: Unique functional transaction identifier (consists of 6 characters)
      required: true
      example: "EWZEN7"
      schema:
        type: string
    firstname:
      name: firstname
      in: query
      example: Ralf
      schema:
        type: string
    lastname:
      name: lastname
      in: query
      example: Ratenkauf
      schema:
        type: string
    orderId:
      name: orderId
      in: query
      example: ABCDE
      schema:
        type: string
    status:
      name: status
      in: query
      schema:
        type: array
        items:
          type: string
          enum:
            - REPORT_CAPTURE
            - REPORT_CAPTURE_EXPIRING
            - IN_BILLING
            - BILLED
            - EXPIRED
    minOrderValue:
      name: minOrderValue
      in: query
      schema:
        type: number
        example: 200
    maxOrderValue:
      name: maxOrderValue
      in: query
      schema:
        type: number
        example: 9999.99
  responses:
    default:
      description: Internal server error or error from third party services
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ServerError'
    TransactionResponse:
      description: Transaction data
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/TransactionResponse'
    TransactionListResponse:
      description: Transaction data of more than one transactions
      content:
        application/hal+json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionResponse'
    ConstraintViolationError:
      description: The request is invalid and has one or more constraint violations.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ConstraintViolation'
    AuthenticationError:
      description: The request has not been applied because it lacks valid authentication credentials.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'
    ForbiddenError:
      description: The request could not be completed due to permanent denial of access to a resource or entity.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ConstraintViolation'
    NotFoundError:
      description: The request could not be completed due to an entity that was not found.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ConstraintViolation'
    ConflictError:
      description: The request could not be completed due to a conflict.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ConstraintViolation'
